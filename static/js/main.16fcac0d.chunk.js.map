{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","mon","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAKaA,G,YAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,mCAAOL,EAAMG,QAAQG,KAArB,OACA,kCAAMN,EAAMG,QAAQI,MAApB,YCHKC,EAAW,SAAAR,GAAK,OAIzB,aAFA,CAEA,OAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAC,GAAG,OAEnB,aADA,CACC,EAAD,CAAmBR,QAASQ,GAAjBA,EAAIP,UCRVQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAb,UAAU,SACVc,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCkDAG,G,wDApDb,aAAc,IAAD,8BAEX,gBAmBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAPJ,E,gEAcO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BASlC,IAAD,EAC4BC,KAAKN,MAA/Bd,EADF,EACEA,SAAUW,EADZ,EACYA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBAClD,OACE,sBAAK/B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACAY,YAAY,kBACZC,aAAee,KAAKf,eAEtB,cAAC,EAAD,CAAUL,SAAWqB,W,GAvCTI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.16fcac0d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\n// 裡面放 JSX\nexport const Card = props => (\n    <div className='card-container'>\n        <img src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`} alt=\"monster\"/>\n        <h2> { props.monster.name } </h2>\n        <p> { props.monster.email } </p>\n    </div>\n)\n\n","import React from 'react';\nimport './card-list.styles.css';\n\nimport { Card } from '../card/card';\n\n// app.js 傳過來的monsters資料，放在props 供使用\nexport const CardList = props => (\n    \n    // { return <div className='card-list'>{props.children}</div> }\n\n    <div className='card-list'>\n    {props.monsters.map(mon => (\n        // 導入 card： 個別顯示每隻怪獸資料\n        <Card key={mon.id} monster={mon}/>\n        // <h1 key={mon.id}> {mon.name} </h1>\n    ))}\n    </div>\n\n)","import React from 'react';\n\nimport './search-box.css';\n\n// 從app.js傳來 placeholder and handleChange 兩個參數\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n    className='search'\n    type='search'\n    placeholder={ placeholder }\n    onChange={ handleChange } \n    />\n);","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.jsx'\nimport './App.css';\n\n// component is a property on react(library), so we can use: react.Component without importing { Component }\nclass App extends Component {\n  // constructor()跟 super() render()都是 Component 內建的function\n  constructor(){\n    \n    super(); // call constructor() on Component\n    // 利用state的改變去改變DOM物件\n    // string是 state 裡的 property\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n\n    };\n  }\n\n  // life cycle: 利用mount這個life cycle，去獲取jsonplaceholder的資料\n  // 再用setState把撈回之資料 新增到monsters陣列中 給State變化\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({ monsters: users }))\n  }\n\n  // 這裡要用 arrow function 讓this可以跟 class App產生連結，用普通function會報錯\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  // 下面的 monsters 對應到props\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Robot So Cute</h1>\n        <SearchBox\n        placeholder='Search monsters'\n        handleChange={ this.handleChange }\n        />\n      <CardList monsters={ filteredMonsters } /> \n      </div>\n\n    //   <div className=\"App\">\n    //     <CardList name=\"LS~\">\n    //        { this.state.monsters.map(mon => (\n    //     <h1 key={mon.id}> {mon.name} </h1>\n    //   ))}\n    //     </CardList>\n    // </div>\n    )\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}